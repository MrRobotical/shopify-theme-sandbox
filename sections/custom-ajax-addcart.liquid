<style>
    .added-to-cart {
        text-align: center;
        font-size: 12px;
        margin-top: 10px;
    }
</style>

{% if section.settings.selected_product %}
  {% assign product = all_products[section.settings.selected_product] %}
  {% assign selectedVariant = product.selected_or_first_available_variant %}

  <div class="product-page">
    <div class="width">
      <div class="product">
        <div class="product-image">
          <img src="{{ product.featured_image | img_url: '200x' }}">
        </div>

        <div class="product-content">
          <h2>{{ product.title }}</h2>
          <p class="product-price">{{ selectedVariant.price | money }}</p>

          {% form 'product', product %}
            <label class="product-option">Options</label>
            <select class="product-select" name="id">
              {% for variant in product.variants %}
                <option
                  {% if selectedVariant.id == variant.id %}
                    selected
                  {% endif %}
                  value="{{ variant.id }}"
                >
                  {{ variant.title }}
                </option>
              {% endfor %}
            </select>

            <div class="product-quantity">
              <label for="quantity">Quantity</label>
              <input name="quantity" id="quantity" type="number" value="1" min="1">
            </div>

            <button class="button product-add" type="submit">Add to cart</button>
          {% endform %}
        </div>
      </div>
    </div>
  </div>
{% else %}
  <p>Please select a product in the theme editor.</p>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addToCartForms = document.querySelectorAll('form[action="/cart/add"]');
  addToCartForms.forEach((form) => {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const formData = new FormData(form);
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: formData,
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const cart = await response.json();
        console.log('Cart object:', cart);

        // Update cart count
        document.querySelectorAll(".cart-count").forEach((el) => {
          el.textContent = cart.item_count;
        });

        // Display message
        const message = document.createElement("p");
        message.classList.add("added-to-cart");
        message.textContent = "Added to cart!";
        form.appendChild(message);

        // Open the cart drawer
        const cartDrawer = document.querySelector('cart-drawer');
        if (cartDrawer) {
          console.log('Found cart drawer:', cartDrawer);

          // Fetch cart drawer section HTML
          const sectionsToRender = cartDrawer.getSectionsToRender();
          const sectionHTMLPromises = sectionsToRender.map(async (section) => {
            const sectionResponse = await fetch(`${window.location.pathname}?section_id=${section.id}`);
            const sectionHTML = await sectionResponse.text();
            return { [section.id]: sectionHTML };
          });

          const sectionHTMLResults = await Promise.all(sectionHTMLPromises);
          const sectionsHTML = Object.assign({}, ...sectionHTMLResults);

          // Debugging
          console.log('Fetched sections:', sectionsHTML);

          console.log('Rendering contents:', { id: cart.id, sections: sectionsHTML });
          cartDrawer.renderContents({ id: cart.id, sections: sectionsHTML });
        } else {
          console.warn('Cart drawer not found.');
        }

      } catch (error) {
        console.error('There was an error adding the product to the cart:', error);
      }
    });
  });
});


</script>

{% schema %}
{
  "name": "VIP Product 2",
  "settings": [
    {
      "type": "product",
      "id": "selected_product",
      "label": "Select a product"
    }
  ],
  "presets": [
    {
      "name": "VIP Product 2"
    }
  ]
}
{% endschema %}


